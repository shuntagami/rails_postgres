name: Rails
on:
  push:
    branches:
      - main
      - develop
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
jobs:
  build:
    name: rails
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: test
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    container:
      image: ruby:3.0.2
      env:
        RAILS_ENV: test
        APP_DATABASE_HOST: postgres
        APP_DATABASE_USER: postgres
        APP_DATABASE_PASSWORD: password
        POSTGRES_HOST: postgres
        RAILS_DATABASE_USER: postgres
        RAILS_DATABASE_PASSWORD: password
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        with:
          path: vendor/bundle
          key: bundle-${{ hashFiles('**/Gemfile.lock') }}
      - uses: actions/cache@v2
        with:
          path: node_modules
          key: yarn-${{ hashFiles('**/yarn.lock') }}
      - name: Setup YARN and NodeJS
        run: |
          curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add -
          echo "deb https://dl.yarnpkg.com/debian/ stable main" | tee /etc/apt/sources.list.d/yarn.list
          curl -sL https://deb.nodesource.com/setup_16.x | bash -
          apt-get install -y nodejs yarn
      - name: Build and setup
        run: |
          gem install bundler -N -v $(grep "BUNDLED WITH" -1 Gemfile.lock | tail -n 1)
          bundle config set deployment 'true'
          bundle install --jobs 4 --retry 3
          bundle exec rails yarn:install db:setup webpacker:compile
      - name: Run rspec
        run: bundle exec rspec
      - name: Run rubocop
        run: bundle exec rubocop
      - name: Run eslint
        run: yarn lint

  deploy:
    runs-on: ubuntu-latest
    steps:
      - run: echo "[deploy] ${{ contains(github.event.head_commit.message, '[deploy]') }}"
  push_to_erc:
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.message, '[deploy]') == true
    steps:
      - uses: actions/checkout@v1
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        env:
          DOCKER_BUILDKIT: 1
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.AWS_ECR_REPO_NAME }}
        run: |
          docker build --target production -t $ECR_REGISTRY/$ECR_REPOSITORY .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
